import { ActionContext } from 'vuex'; import actions from '@/datasetView/store/search-store/search.store.actions'; import { datasetViewFactory } from '@/datasetView/api/datasetViewFactory'; import { types } from '@/datasetView/store/mutation-types';

jest.mock('@/datasetView/api/datasetViewFactory', () => ({ getLinkedRefferingElement: jest.fn(), }));

describe('FETCH_LINKAGE_REFFERING_ELEMENTS_DATA Action', () => { let commit: jest.Mock; let context: ActionContext<any, any>;

beforeEach(() => { commit = jest.fn(); context = { commit } as ActionContext<any, any>; });

it('commits SET_LINKAGE_REFFERING_ELEMENTS on success', async () => { const mockData = { results: [{ id: 1, name: 'Element 1' }] }; datasetViewFactory.getLinkedRefferingElement.mockResolvedValue({ data: mockData });

await actions[types.FETCH_LINKAGE_REFFERING_ELEMENTS_DATA](context, 'test-key');

expect(commit).toHaveBeenCalledWith(types.SET_LINKAGE_REFFERING_ELEMENTS, mockData.results);

});

it('commits MUTATE_LINKAGE_REFFERING_ELEMENTS on failure', async () => { datasetViewFactory.getLinkedRefferingElement.mockRejectedValue(new Error('API Error'));

await actions[types.FETCH_LINKAGE_REFFERING_ELEMENTS_DATA](context, 'test-key');

expect(commit).toHaveBeenCalledWith(types.MUTATE_LINKAGE_REFFERING_ELEMENTS, []);

}); });

