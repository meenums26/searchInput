import { shallowMount } from '@vue/test-utils';
import EditGoldenDataElement from '@/components/edit-data-element.vue';
import { GdsSidebarStorage } from '@/storage/gds-sidebar.storage';

// Mock data
const mockSearchResults = [
  { data_element_id: 1, data_element_name: 'Element 1' },
  { data_element_id: 2, data_element_name: 'Element 2' }
];

describe('edit-data-element.vue', () => {
  let wrapper: any;

  beforeEach(() => {
    // Mock storage methods
    jest.spyOn(GdsSidebarStorage, 'fetchLinkageRefferingElements').mockResolvedValue(undefined);
    jest.spyOn(GdsSidebarStorage, 'getLinkageReferringElements').mockReturnValue(mockSearchResults);
  });

  it('onSearch updates suggestions correctly', async () => {
    wrapper = shallowMount(EditGoldenDataElement, {
      props: {
        goldenDataElement: {
          data_element_id: 123,
          change_type: 'EDIT' // Add required property
        }
      }
    });

    await wrapper.vm.onSearch('test');
    
    expect(wrapper.vm.suggestionList).toEqual([
      '1 | Element 1',
      '2 | Element 2'
    ]);
    expect(wrapper.vm.isSeacrhLoading).toBe(false);
  });

  it('onSuggestionSelected updates linkage ID and saves', async () => {
    wrapper = shallowMount(EditGoldenDataElement, {
      props: {
        goldenDataElement: {
          data_element_id: 123,
          change_type: 'EDIT'
        }
      }
    });

    // Mock autoSave
    const autoSaveMock = jest.fn();
    wrapper.vm.autoSave = autoSaveMock;

    // Simulate selecting a suggestion
    await wrapper.vm.onSuggestionSelected({ name: '1 | Element 1' });
    
    expect(wrapper.vm.linkageReferringId).toBe('1');
    expect(autoSaveMock).toHaveBeenCalled();
  });
});
