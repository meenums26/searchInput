  it('Async [types.FETCH_LINKAGE_REFFERING_ELEMENTS_DATA]: should commit SET_LINKAGE_REFFERING_ELEMENTS on successful API call', async () => {
    const commitSpy = jest.spyOn(gdsActionContext, 'commit');
    const searchKey = 'testKey';

    await actions[FETCH_LINKAGE_REFFERING_ELEMENTS_DATA](
      gdsActionContext,
      searchKey
    );

    expect(datasetViewFactory.getLinkedRefferingElement).toHaveBeenCalledWith(searchKey);
    expect(commitSpy).toHaveBeenCalledWith(
      SET_LINKAGE_REFFERING_ELEMENTS,
      mockLinkedRefferingElementsResponse.data.results
    );
  });

  it('Async [types.FETCH_LINKAGE_REFFERING_ELEMENTS_DATA]: should commit MUTATE_LINKAGE_REFFERING_ELEMENTS with empty array on API error', async () => {
    const commitSpy = jest.spyOn(gdsActionContext, 'commit');
    const searchKey = 'errorKey';
    const errorMessage = 'API request failed';
    jest
      .spyOn(datasetViewFactory, 'getLinkedRefferingElement')
      .mockRejectedValue(new Error(errorMessage));
    const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(() => {});

    await actions[FETCH_LINKAGE_REFFERING_ELEMENTS_DATA](
      gdsActionContext,
      searchKey
    );

    expect(datasetViewFactory.getLinkedRefferingElement).toHaveBeenCalledWith(searchKey);
    expect(consoleErrorSpy).toHaveBeenCalledWith('Fetch error :', new Error(errorMessage));
    expect(commitSpy).toHaveBeenCalledWith(MUTATE_LINKAGE_REFFERING_ELEMENTS, []);

    consoleErrorSpy.mockRestore();
  });

