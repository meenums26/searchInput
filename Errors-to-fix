// Add these tests to edit-data-element.spec.ts

describe('SearchBarComponent and Lifecycle Dropdown', () => {
  it('onSearch updates suggestionList correctly', async () => {
    const mockResponse = [
      { data_element_id: 1, data_element_name: 'Test Element' }
    ];
    jest.spyOn(GdsSidebarStorage, 'fetchLinkageRefferingElements').mockResolvedValue(mockResponse);
    jest.spyOn(GdsSidebarStorage, 'getLinkageReferringElements').mockReturnValue(mockResponse);

    wrapper = createWrapper();
    await wrapper.vm.onSearch('test');

    expect(wrapper.vm.suggestionList).toEqual(['1 | Test Element']);
    expect(wrapper.vm.isSeacrhLoading).toBe(false);
  });

  it('onSuggestionSelected updates linkageReferringId and triggers save', async () => {
    const saveSpy = jest.spyOn(wrapper.vm, 'autoSave');
    wrapper = createWrapper();
    
    await wrapper.vm.onSuggestionSelected({ name: '123 | Test Element' });
    
    expect(wrapper.vm.linkageReferringId).toBe('123');
    expect(saveSpy).toHaveBeenCalled();
  });

  it('lifecycle dropdown selection calls dataElementOptionChanged', async () => {
    const optionChangedSpy = jest.spyOn(wrapper.vm, 'dataElementOptionChanged');
    const lifecycleEvent = { value: GdeLifecycleStatus.InUse };
    
    wrapper = createWrapper();
    await wrapper.vm.dataElementOptionChanged(lifecycleEvent, 'lifecycle');
    
    expect(optionChangedSpy).toHaveBeenCalledWith(lifecycleEvent, 'lifecycle');
    expect(wrapper.vm.gdeLifecycleStatus).toBe(GdeLifecycleStatus.InUse);
  });

  it('shows validation error when lifecycle is invalid', async () => {
    (useVuelidate as jest.Mock).mockReturnValue({
      value: {
        gdeLifecycleStatus: { required: { $invalid: true } },
        // ... other validation properties
      }
    });
    
    wrapper = createWrapper();
    const validationError = wrapper.find('.validation-warning');
    
    expect(validationError.exists()).toBe(true);
    expect(validationError.text()).toContain('gdsSidebar.validationErrors.gdeLifeCycleEmpty');
  });
});

it('search component is disabled when isNoReferringFlag is true', async () => {
  jest.spyOn(GdsSidebarStorage, 'getActiveGoldenDataElement').mockReturnValue({
    ...mockLinkedElement,
    referring_element_indicator: 'No'
  });

  wrapper = createWrapper();
  const searchComponent = wrapper.findComponent(SearchBarComponent);
  
  expect(searchComponent.props('class')).toMatchObject({ disabled: true });
});
