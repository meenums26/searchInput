it('should set linkageReferringId when a valid suggestion is selected', () => {
  // Mock selected item
  const selectedItem = { name: '123 | Test Name' };

  // Call function
  wrapper.vm.onSuggestionSelected(selectedItem);

  // Assertions
  expect(wrapper.vm.linkageReferringId.value).toBe('123');
  expect(updateActiveElement).toHaveBeenCalledWith('referring_element_id', '123');
  expect(autoSave).toHaveBeenCalled();
});

it('should set linkageReferringId to an empty string when an invalid suggestion is selected', () => {
  // Mock selected item with no valid ID
  const selectedItem = { name: ' | Test Name' };

  // Call function
  wrapper.vm.onSuggestionSelected(selectedItem);

  // Assertions
  expect(wrapper.vm.linkageReferringId.value).toBe('');
  expect(updateActiveElement).toHaveBeenCalledWith('referring_element_id', '');
  expect(autoSave).toHaveBeenCalled();
});

import { shallowMount } from '@vue/test-utils';
import GdsSidebarStorage from '@/modules/datasetView/components/gds-sidebar.storage';
import types from '@/store/types';

describe('fetchLinkageReferringElements', () => {
  let storeMock: any;

  beforeEach(() => {
    storeMock = {
      dispatch: jest.fn(),
      commit: jest.fn(),
    };
    jest.spyOn(console, 'error').mockImplementation(() => {}); // Mock console.error to avoid logging in test output
  });

  it('should dispatch FETCH_LINKAGE_REFERRING_ELEMENTS_DATA action with searchKey', async () => {
    // Arrange
    const searchKey = 'testKey';
    storeMock.dispatch.mockResolvedValueOnce(undefined); // Mock store dispatch

    // Act
    await GdsSidebarStorage.fetchLinkageReferringElements.call({ store: () => storeMock }, searchKey);

    // Assert
    expect(storeMock.dispatch).toHaveBeenCalledWith(types.FETCH_LINKAGE_REFERRING_ELEMENTS_DATA, searchKey);
  });

  it('should log an error and call mutateLinkageReferringElements with an empty array on failure', async () => {
    // Arrange
    const searchKey = 'testKey';
    const error = new Error('Failed to fetch');
    storeMock.dispatch.mockRejectedValueOnce(error);
    const mutateSpy = jest.spyOn(GdsSidebarStorage, 'mutateLinkageReferringElements');

    // Act
    await GdsSidebarStorage.fetchLinkageReferringElements.call({ store: () => storeMock }, searchKey);

    // Assert
    expect(console.error).toHaveBeenCalledWith('Failed to fetch linkage elements:', error);
    expect(mutateSpy).toHaveBeenCalledWith([]);
  });
});
