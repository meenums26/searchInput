<fully corrected test file with proper mocking of isAdded and Utils.debounce>jest.mock('@/utils', () => ({ debounce: jest.fn((fn) => fn) }));

describe('onSearch', () => { it('should call onSearch when input changes', async () => { const wrapper = shallowMount(EditDataElement, { global: { mocks: { $setup: { isAdded: jest.fn(() => true) } } } }); const input = wrapper.find('input'); await input.setValue('test query'); expect(wrapper.emitted('onSearch')).toBeTruthy(); expect(wrapper.emitted('onSearch')?.[0]).toEqual(['test query']); }); });

describe('onSuggestionSelected', () => { it('should call onSuggestionSelected when a suggestion is clicked', async () => { const wrapper = shallowMount(EditDataElement, { global: { mocks: { $setup: { isAdded: jest.fn(() => true) } } }, data() { return { suggestions: ['Suggestion 1', 'Suggestion 2'] }; } }); const suggestion = wrapper.find('.suggestion-item'); await suggestion.trigger('click'); expect(wrapper.emitted('onSuggestionSelected')).toBeTruthy(); expect(wrapper.emitted('onSuggestionSelected')?.[0]).toEqual(['Suggestion 1']); }); });

